variables:
  DEBUG: True
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  USERNAME: ${USERNAME}
  PASSWORD: ${PASSWORD}

default:
  image: python:latest

stages:
  - build
  - lint
  - test
  - coverage
  - package
  - deploy

cache:
  paths:
    - "$CI_PROJECT_DIR/.cache/pip"

before_script:
    - python -m venv venv
    - venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt

compilation:
  stage: build
  allow_failure: false
  script:
    - echo "Start building..."
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py check
    - echo "Building success"
  only:
  - branches

linting:
  stage: lint
  allow_failure: true
  before_script: []
  script:
    - echo "Start linting..."
    - flake8
    - echo "Linting success."
  only:
  - branches

tests:
  stage: test
  allow_failure: false
  before_script: []
  script:
    - echo "Start testing..."
    - python manage.py test
    - echo "Testing success."
  only:
  - branches

coverage:
  stage: coverage
  before_script: []
  script:
    - echo "Start tests covering..."
    - pytest --cov=. 
    - echo "Testing coverage success." 
  only:
  - branches

packaging:
  stage: package
  allow_failure: false
  image: docker:stable
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  before_script: []
  script:
    - echo "Start packaging..."
    - echo "$DOCKER_HUB_PASSWORD" | docker login --username $DOCKER_HUB_USERNAME --password-stdin
    - docker build --tag $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA --tag $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:latest .
    - docker push $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME
    - docker pull $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME
    - echo "Packaging success."
  only:
    - main

deploy:
  stage: deploy
  script:
    - echo "Start deploying..."
    - echo "Deploy to production server"
    - curl -s "https://api.render.com/deploy/srv-${DEPLOY_HOOK_1}?key=${DEPLOY_HOOK_2}"
  only:
  - main
