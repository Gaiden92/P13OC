variables:
  DEBUG: True
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  USERNAME: ${USERNAME}
  PASSWORD: ${PASSWORD}

default:
  image: python:latest
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
stages:
  - build
  - test
  - package
  - deploy

cache:
  paths:
        - .cache/pip
  key: "$CI_JOB_NAME"

compilation:
  stage: build

  script:
    - python manage.py collectstatic --noinput
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py check

linting:
  stage: test
  allow_failure: true

  script:
    - flake8
    - echo "No lint issue found."

tests:
  stage: test
  allow_failure: true
  script:
    - python manage.py test

coverage:
  stage: test
  allow_failure: true
  script:
    - pytest --cov=. --cov-report term --cov-report xml:coverage.xml
    - echo "Coverage test over with no issues" 
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

packaging:
  stage: package
  allow_failure: true
  image: docker:stable
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login --username $DOCKER_HUB_USERNAME --password-stdin
    - docker build --tag $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA --tag $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:latest .
    - docker push $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME
    - docker pull $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME

deploy:
  stage: deploy
  script:
    - echo "Deploy to production server"
    - curl -s "https://api.render.com/deploy/srv-${DEPLOY_HOOK_1}?key=${DEPLOY_HOOK_2}"
  only:
  - main